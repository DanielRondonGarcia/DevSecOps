name: DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/devsecops

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests configured yet"

      - name: Build application
        run: npm run build || echo "No build script configured"

      - name: Extract metadata for image tagging
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

  # Job 2: SAST - Static Application Security Testing with SonarQube
  sast-sonarqube:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests to generate coverage and test report
        run: npm test

      - name: Show generated test report (debug)
        if: always()
        run: |
          echo "==== Begin coverage/test-reporter.xml ===="
          if [ -f coverage/test-reporter.xml ]; then cat coverage/test-reporter.xml; else echo "coverage/test-reporter.xml not found"; fi
          echo "==== End coverage/test-reporter.xml ===="

      - name: Normalize path separators in test report
        run: |
          if [ -f coverage/test-reporter.xml ]; then
            sed -i 's|\\|/|g' coverage/test-reporter.xml
          fi

      - name: Validate test report XML structure
        run: |
          python - << 'PY'
          import sys
          import xml.etree.ElementTree as ET
          try:
              ET.parse('coverage/test-reporter.xml')
              print('Generic test execution XML is well-formed')
          except Exception as e:
              print('XML validation failed:', e)
              sys.exit(1)
          PY

      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectVersion=${{ steps.get-version.outputs.version }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # We do not recommend to use this in a pull request. Prefer using pull request
      # decoration instead.
      - uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 3: SCA - Software Composition Analysis with Trivy
  sca-trivy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        run: |
          IMAGE_TAG=$(echo "${{ needs.build-and-test.outputs.image-tag }}" | head -n1)
          docker build -t "${IMAGE_TAG}" .

      - name: Set image tag for Trivy scan
        id: set-tag
        run: |
          IMAGE_TAG=$(echo "${{ needs.build-and-test.outputs.image-tag }}" | head -n1)
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.set-tag.outputs.image-tag }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  # Job 4: IaC Security - Infrastructure as Code Security with Checkov
  iac-security-checkov:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov GitHub Action
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          # Escanea los manifiestos en la carpeta k8s
          directory: ./k8s
          framework: kubernetes
          # Soft fail: reporta errores pero no detiene el pipeline
          # Esto es comÃºn para IaC, para revisar antes de bloquear.
          soft_fail: true
          # Genera un reporte en formato SARIF para subirlo a GitHub
          output_format: sarif
          output_file_path: results.sarif
        
      - name: Upload Checkov scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Job 5: Build and Push Docker Image
  docker-build-push:
    runs-on: ubuntu-latest
    needs: [sast-sonarqube, sca-trivy, iac-security-checkov]
    if: always() && (needs.sast-sonarqube.result == 'success' || needs.sast-sonarqube.result == 'skipped') && (needs.sca-trivy.result == 'success' || needs.sca-trivy.result == 'skipped') && (needs.iac-security-checkov.result == 'success' || needs.iac-security-checkov.result == 'skipped')
    outputs:
      image-url: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Deploy Application for DAST Testing
  deploy-for-testing:
    runs-on: ubuntu-latest
    needs: docker-build-push
    outputs:
      app-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Deploy application
        id: deploy
        run: |
          # Start the application in a container for testing
          docker run -d -p 3000:3000 --name test-app ${{ needs.docker-build-push.outputs.image-url }}
          
          # Wait for application to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          
          echo "url=http://localhost:3000" >> $GITHUB_OUTPUT

      - name: Verify deployment
        run: |
          curl -f http://localhost:3000/health
          curl -f http://localhost:3000/

  # Job 7: DAST - Dynamic Application Security Testing with OWASP ZAP
  dast-owasp-zap:
    runs-on: ubuntu-latest
    needs: deploy-for-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ needs.deploy-for-testing.outputs.app-url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        continue-on-error: true

      - name: Create ZAP report directory
        run: mkdir -p zap-reports

      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: ${{ needs.deploy-for-testing.outputs.app-url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j'
        continue-on-error: true

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-reports
          path: |
            report_html.html
            report_json.json
            report_md.md

  # Job 8: Security Summary Report
  security-summary:
    runs-on: ubuntu-latest
    needs: [sast-sonarqube, sca-trivy, iac-security-checkov, dast-owasp-zap]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "## ðŸ”’ DevSecOps Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| SAST (SonarQube) | ${{ needs.sast-sonarqube.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SCA (Trivy) | ${{ needs.sca-trivy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| IaC Security (Checkov) | ${{ needs.iac-security-checkov.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| DAST (OWASP ZAP) | ${{ needs.dast-owasp-zap.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“Š Check the Security tab for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY

  # Job 9: Production Deploy (only on main branch and if all security checks pass)
  production-deploy:
    runs-on: ubuntu-latest
    needs: [docker-build-push, security-summary]
    if: github.ref == 'refs/heads/main' && needs.docker-build-push.result == 'success'
    environment: production
    steps:
      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deploying to production..."
          echo "Image: ${{ needs.docker-build-push.outputs.image-url }}"
          # Add your production deployment logic here
          # For example: kubectl, docker-compose, cloud provider CLI, etc.