name: DevSecOps Pull Request Validator

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  issues: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/devsecops

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests configured yet"

      - name: Build application
        run: npm run build || echo "No build script configured"

      - name: Extract metadata for image tagging
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

  # Job 2: SAST - Static Application Security Testing with SonarQube
  sast-sonarqube:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests to generate coverage and test report
        run: npm test

      - name: Show generated test report (debug)
        if: always()
        run: |
          echo "==== Begin coverage/test-reporter.xml ===="
          if [ -f coverage/test-reporter.xml ]; then cat coverage/test-reporter.xml; else echo "coverage/test-reporter.xml not found"; fi
          echo "==== End coverage/test-reporter.xml ===="

      - name: Normalize path separators in test report
        run: |
          if [ -f coverage/test-reporter.xml ]; then
            sed -i 's|\\|/|g' coverage/test-reporter.xml
          fi

      - name: Validate test report XML structure
        run: |
          python - << 'PY'
          import sys
          import xml.etree.ElementTree as ET
          try:
              ET.parse('coverage/test-reporter.xml')
              print('Generic test execution XML is well-formed')
          except Exception as e:
              print('XML validation failed:', e)
              sys.exit(1)
          PY

      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectVersion=${{ steps.get-version.outputs.version }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # We do not recommend to use this in a pull request. Prefer using pull request
      # decoration instead.
      - uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 3: SCA - Software Composition Analysis with Trivy
  sca-trivy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        run: |
          IMAGE_TAG=$(echo "${{ needs.build-and-test.outputs.image-tag }}" | head -n1)
          docker build -t "${IMAGE_TAG}" .

      - name: Set image tag for Trivy scan
        id: set-tag
        run: |
          IMAGE_TAG=$(echo "${{ needs.build-and-test.outputs.image-tag }}" | head -n1)
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.set-tag.outputs.image-tag }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

  # Job 4: IaC Security - Infrastructure as Code Security with Checkov
  iac-security-checkov:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov GitHub Action
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          # Escanea los manifiestos en la carpeta k8s
          directory: ./k8s
          framework: kubernetes
          # Soft fail: reporta errores pero no detiene el pipeline
          # Esto es común para IaC, para revisar antes de bloquear.
          soft_fail: true
          # Genera un reporte en formato SARIF para subirlo a GitHub
          output_format: sarif
          output_file_path: results.sarif

      - name: Upload Checkov scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Job 7: DAST - Dynamic Application Security Testing with OWASP ZAP
  dast-owasp-zap:
    runs-on: ubuntu-latest
    needs: build-and-test
    # Se ejecuta siempre después de SAST, tanto en PRs como en main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine target URL
        id: target-url
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            # En main branch, usar la URL de producción
            APP_URL="https://app.rondon.cloud"
            echo "Using production URL for main branch: $APP_URL"
          else
            # En PRs, usar una URL de staging o demo
            APP_URL="https://app.rondon.cloud"  # Puedes cambiar esto por una URL de staging
            echo "Using staging/demo URL for PR: $APP_URL"
          fi
          echo "url=$APP_URL" >> $GITHUB_OUTPUT

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to be fully ready..."
          sleep 30

          # Verificar que la aplicación responda correctamente
          APP_URL="${{ steps.target-url.outputs.url }}"
          echo "Testing application readiness at: $APP_URL"

          # Intentar conectar hasta 5 veces con intervalos de 10 segundos
          for i in {1..5}; do
            if curl -f -s "$APP_URL/health" > /dev/null; then
              echo "Application is ready!"
              break
            else
              echo "Attempt $i: Application not ready yet, waiting..."
              sleep 10
            fi
          done

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ steps.target-url.outputs.url }}
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -d -T 60"
        continue-on-error: true

      - name: Create ZAP report directory
        run: |
          GIT_SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          mkdir -p zap-reports-$GIT_SHA_SHORT

      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: ${{ needs.deploy-to-kubernetes.outputs.app-url }}
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -j -d -T 120"
        continue-on-error: true

      - name: Process ZAP Results
        if: always()
        run: |
          echo "Processing ZAP scan results..."

          # Usar el directorio dinámico creado anteriormente
          GIT_SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          REPORT_DIR="zap-reports-$GIT_SHA_SHORT"

          # Verificar si existen los archivos de reporte
          if [ -f "report_html.html" ]; then
            cp report_html.html "$REPORT_DIR/"
            echo "HTML report found and copied"
          fi

          if [ -f "report_json.json" ]; then
            cp report_json.json "$REPORT_DIR/"
            echo "JSON report found and copied"

            # Extraer estadísticas básicas del JSON
            if command -v jq &> /dev/null; then
              echo "=== ZAP Scan Summary ==="
              jq -r '.site[0].alerts[] | "Alert: \(.name) - Risk: \(.riskdesc) - Confidence: \(.confidence)"' report_json.json | head -10
            fi
          fi

          if [ -f "report_md.md" ]; then
            cp report_md.md "$REPORT_DIR/"
            echo "Markdown report found and copied"
          fi

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-security-reports-${{ github.sha }}
          path: |
            report_html.html
            report_json.json
            report_md.md
            zap-reports-*/
          retention-days: 30

      - name: Comment ZAP Results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            let comment = '## 🔒 DAST Security Scan Results\n\n';

            if (fs.existsSync('report_json.json')) {
              const report = JSON.parse(fs.readFileSync('report_json.json', 'utf8'));
              const alerts = report.site[0]?.alerts || [];

              const highRisk = alerts.filter(a => a.riskcode === '3').length;
              const mediumRisk = alerts.filter(a => a.riskcode === '2').length;
              const lowRisk = alerts.filter(a => a.riskcode === '1').length;

              comment += `### Security Issues Found:\n`;
              comment += `- 🔴 High Risk: ${highRisk}\n`;
              comment += `- 🟡 Medium Risk: ${mediumRisk}\n`;
              comment += `- 🟢 Low Risk: ${lowRisk}\n\n`;

              if (highRisk > 0) {
                comment += `⚠️ **High risk vulnerabilities detected!** Please review the security report.\n`;
              } else {
                comment += `✅ No high risk vulnerabilities detected.\n`;
              }
            } else {
              comment += 'ZAP scan completed but no detailed results available.\n';
            }

            comment += '\nDetailed reports are available in the workflow artifacts.';

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Comment posted successfully');
            } catch (error) {
              console.log('Failed to post comment:', error.message);
              console.log('ZAP scan results are still available in artifacts');
            }

  # Job 8: Security Summary Report
  security-summary:
    runs-on: ubuntu-latest
    needs: [sast-sonarqube, sca-trivy, iac-security-checkov, dast-owasp-zap]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "## 🔒 DevSecOps Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| SAST (SonarQube) | ${{ needs.sast-sonarqube.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SCA (Trivy) | ${{ needs.sca-trivy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| IaC Security (Checkov) | ${{ needs.iac-security-checkov.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| DAST (OWASP ZAP) | ${{ needs.dast-owasp-zap.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Check the Security tab for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY
